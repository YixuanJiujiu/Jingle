import numpy as np
from datetime import datetime, timedelta

# Given data
data = [
    ("2023-10-16 12:55:00.497801", 15),
    ("2023-10-16 12:55:37.236701", 14),
    ("2023-10-16 12:55:44.428259", 13),
    ("2023-10-16 12:57:29.689848", 12),
    ("2023-10-16 12:58:04.004779", 11),
    ("2023-10-16 13:00:04.313141", 10),
    ("2023-10-16 13:00:16.395713", 11),
    ("2023-10-16 13:01:47.839838", 12),
    ("2023-10-16 13:03:04.536969", 10),
    ("2023-10-16 13:03:16.517036", 9),
    ("2023-10-16 13:03:38.917214", 8),
    ("2023-10-16 13:07:04.387490", 7),
    ("2023-10-16 13:08:19.359219", 6),
    ("2023-10-16 13:08:27.402921", 7),
    ("2023-10-16 13:11:07.407161", 8),
    ("2023-10-16 13:12:34.614789", 9),
    ("2023-10-16 13:12:53.572700", 10),
    ("2023-10-16 13:13:05.755258", 9),
    ("2023-10-16 13:13:33.918322", 11),
    ("2023-10-16 13:14:44.673016", 13),
    ("2023-10-16 13:14:52.249863", 12),
    ("2023-10-16 13:14:59.524484", 13),
    ("2023-10-16 13:15:45.096771", 14),
    ("2023-10-16 13:18:17.155325", 13),
    ("2023-10-16 13:19:10.813959", 14),
    ("2023-10-16 13:20:28.439866", 13),
    ("2023-10-16 13:20:39.593447", 14),
    ("2023-10-16 13:20:56.693699", 16),
    ("2023-10-16 13:21:04.783064", 16),
    ("2023-10-16 13:22:26.010376", 15),
    ("2023-10-16 13:22:44.725774", 20),
    ("2023-10-16 13:24:39.552519", 19),
    ("2023-10-16 13:26:00.616205", 20),
    ("2023-10-16 13:26:36.150766", 21),
    ("2023-10-16 13:26:43.318478", 19),
    ("2023-10-16 13:26:56.276121", 21),
    ("2023-10-16 13:28:19.117946", 22),
    ("2023-10-16 13:29:55.118719", 21),
    ("2023-10-16 13:30:10.679678", 22),
    ("2023-10-16 13:30:47.843525", 21),
    ("2023-10-16 13:31:09.588060", 23),
    ("2023-10-16 13:34:55.992326", 22),
    ("2023-10-16 13:35:33.797413", 23),
    ("2023-10-16 13:38:36.655932", 22),
    ("2023-10-16 13:41:01.050545", 23),
    ("2023-10-16 13:42:49.595941", 24),
    ("2023-10-16 13:44:01.074249", 23),
    ("2023-10-16 13:44:23.457552", 24),
    ("2023-10-16 13:44:30.869418", 23),
    ("2023-10-16 13:45:03.741421", 24),
    ("2023-10-16 13:45:48.002764", 25),
    ("2023-10-16 13:46:34.438647", 24),
    ("2023-10-16 13:46:41.769289", 25),
    ("2023-10-16 13:46:48.717144", 23),
    ("2023-10-16 13:47:09.812391", 22),
    ("2023-10-16 13:47:26.553592", 21),
    ("2023-10-16 13:48:03.519830", 21),
    ("2023-10-16 13:49:54.662451", 20),
    ("2023-10-16 13:50:01.830228", 19),
    ("2023-10-16 13:50:52.113656", 18),
    ("2023-10-16 13:51:06.650557", 17),
    ("2023-10-16 13:51:18.427626", 15),
    ("2023-10-16 13:51:52.730087", 14),
    ("2023-10-16 13:52:24.066236", 13),
    ("2023-10-16 13:55:30.645867", 12)
]


# Extract timestamps and people counts
timestamps = [datetime.strptime(entry[0], '%Y-%m-%d %H:%M:%S.%f') for entry in data]
people_counts = [entry[1] for entry in data]

# Parameters for requests calculation
# mean_requests_per_30s = 0.35
mean_requests_per_30s = 1.05
std_dev = 0.0625

# Create the dataset
results = []
current_time = timestamps[0]
end_time = timestamps[-1]
index = 0

while current_time <= end_time:
    # Determine the number of people in the room for the current time
    while index < len(timestamps) - 1 and current_time >= timestamps[index + 1]:
        index += 1
    people_count = people_counts[index]

    # Calculate the number of requests for the current time
    requests = np.random.normal(mean_requests_per_30s * people_count, std_dev * people_count)
    results.append((current_time, int(round(requests))))

    current_time += timedelta(seconds=30)

# Display the results
for time, request in results:
    print(f"{time}, {request}")
